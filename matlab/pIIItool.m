function pIIItool  [jej_axes, duod_axes] = setup;  figud = get(gcf, 'UserData');    %%%%%%%%%%%%%  % Constants %  %%%%%%%%%%%%%  figud.jej_pressure_channel = 7;  figud.duod_pressure_channel = 3;  figud.jej_pd_channel = 8;  figud.duod_pd_channel = 6;  % The region either side of phase III to use for phase I and III  % calculations  figud.III_window = 15 * 60 * 4;  figud.back_range = [-10 -4];  % range to count as a backward propagating event  figud.forw_range = [4 10];    % range to count as a forward propagating event    set(gcf, 'UserData', figud);function openfile(o, crap, duod_axes, jej_axes, btarray)  persistent path    cwd = pwd;  if path, cd(path); end  [file, path] = uigetfile('*.*', 'Select the data file');  cd(cwd);  file = strcat(path, file);  raw_data = load(file);  [B,A]=butter(3, 30/240);  filt_data=filtfilt(B, A, raw_data);  %filt_data = raw_data;  figud = get(gcf, 'UserData');      figud.filt_data = filt_data;    set(gcf, 'UserData', figud);    tm = [0:(length(filt_data)-1)]/4;    subplot(duod_axes)  plot(tm, filt_data(:,figud.duod_pressure_channel))  ud.YLim = get(gca, 'Ylim');  set(gca, ...      'UserData', ud  , ...      'XminorTick', 'on', ...      'XminorGrid', 'on', ...      'XGrid', 'on', ...      'YGrid', 'on' ...      );    subplot(jej_axes)  plot(tm, filt_data(:,figud.jej_pressure_channel))  ud.YLim = get(gca, 'Ylim');  set(gca, ...      'UserData', ud  , ...      'XminorTick', 'on', ...      'XminorGrid', 'on', ...      'XGrid', 'on', ...      'YGrid', 'on' ...      );    for bt=btarray    set(bt, 'Enable', 'On')  endfunction addline(o, crap, varargin)  setptr(gcf, 'crosshair')  [x,y]=ginput(1);  ax = gca;  ud = get(ax, 'UserData');  sl = line([x x], ud.YLim, ...	    'color', 'green', ...	    'tag', 'start line', ...	    'LineWidth', 1, ...	    'ButtonDownFcn', @lineaction);  [x,y]=ginput(1);  subplot(ax)  el = line([x x], ud.YLim, ...	    'color', 'red', ...	    'tag', 'end line', ...	    'LineWidth', 1, ...	    'ButtonDownFcn', @lineaction);  set(el, 'UserData', sl)  set(sl, 'UserData', el)  setptr(gcf, 'arrow')  function deleteline(o, crap)  l = findobj(gcf, 'Type', 'line');  if isempty(l), return, end  setptr(gcf, 'eraser')  ud = get(gcf, 'UserData');  ud.mode = 'delete';  set(gcf, ...      'UserData', ud, ...      'WindowButtonMotionFcn', '')  function lineaction(o, crap, varargin)  persistent theline  ud = get(gcf, 'UserData');  switch ud.mode   case 'delete'    l = get(o, 'Userdata');    delete([l o])    ud.mode = 'move';    set(gcf, 'UserData', ud, ...	     'WindowButtonMotionFcn', @mousemover);    setptr(gcf, 'arrow')    return       case 'move'    if nargin==2,       lineaction(o, crap, 'init')      return    end    switch varargin{1}     case 'init'      % Line is clicked - change the colour and add tracking actions      % to the figure      theline = o;      set(gcf, 'WindowButtonMotionFcn', {@lineaction, 'move'}, ...	       'WindowButtonUpFcn', {@lineaction, 'done'});           case 'move'      P = get(gca, 'CurrentPoint');      x2 = P(1,1);      set(theline, 'XData', [x2 x2])      if strcmp(get(theline, 'tag'), 'feed line') == 1	set(get(theline, 'UserData'), 'XData', [x2 x2])      end           case 'done'      set(gcf, ...	  'WindowButtonMotionFcn', @mousemover, ...	  'WindowButtonUpFcn', '');    end  endfunction feedline(o, crap)  try    delete(findobj('tag', 'feed line'))  end  axs = findobj('type', 'axes');  setptr(gcf, 'crosshair')  [x,y]=ginput(1);  ud = get(gca, 'UserData');  sl = line([x x], ud.YLim, ...	    'color', 'black', ...	    'tag', 'feed line', ...	    'LineWidth', 1, ...	    'ButtonDownFcn', @lineaction);  if axs(1)==gca    subplot(axs(2))    ud = get(axs(2), 'UserData');  else    subplot(axs(1))    ud = get(axs(1), 'UserData');  end  el = line([x x], ud.YLim, ...	    'color', 'black', ...	    'tag', 'feed line', ...	    'LineWidth', 1, ...	    'ButtonDownFcn', @lineaction);  set(el, 'UserData', sl)  set(sl, 'UserData', el)  setptr(gcf, 'arrow')function bool = pinrect(pts,rect)%PINRECT Determine if points lie in or on rectangle.%   Inputs:%     pts - n-by-2 array of [x,y] data%     rect - 1-by-4 vector of [xlim ylim] for the rectangle%   Outputs:%     bool - length n binary vector  %   Copyright 1988-2002 The MathWorks, Inc.% $Revision: 1.8 $    [i,j] = find(isnan(pts));    bool = (pts(:,1)<rect(1))|(pts(:,1)>rect(2))|...           (pts(:,2)<rect(3))|(pts(:,2)>rect(4));    bool = ~bool;    bool(i) = 0;function mousemover(o, crap)% Determine if the mouse is over the over one of the marker lines% and change the pointer appropriately.  % Determine which (if any) axes the mouse is over  axs = findobj(o, 'type', 'axes')';  inaxes = 0;  for ax=axs    %subplot(ax)    p = get(ax, 'CurrentPoint');    p = p(1, 1:2);    xlim = get(ax, 'xlim');    ylim = get(ax, 'ylim');    if pinrect(p, [xlim ylim])  % inside an axes      inaxes = 1;      break    end    end  % Not in any axes  if ~inaxes    setptr(gcf, 'arrow');    return  end  % Is the pointer near a line?  lns = [findobj(gca, 'tag', 'start line')' ...	 findobj(gca, 'tag', 'end line')' ...	 findobj(gca, 'tag', 'feed line')'];  if isempty(lns)    setptr(gcf, 'arrow')    return  end  u = get(ax, 'Units');  set(ax, 'Units', 'pixels');  mpos = get(ax, 'position'); % in pixels  set(ax, 'Units', u);  five_xpixels = 3.5*diff(xlim)/mpos(3);  for l=lns    x1 = get(l, 'XData');    if abs(p(1)-x1(1))<=five_xpixels      setptr(gcf, 'lrdrag');      return    end  end  setptr(gcf, 'arrow')  function pIIIquit(o, crap, f)  closereq  try, close(26), end  function [jej_axes, duod_axes] = setup  try    delete(findobj('Name', 'Phase III selector'))  end  ud.mode = 'move';  h1 = figure( ...      'Units', 'characters', ...      'Color',[0.8 1.0 0.8], ...      'MenuBar', 'none', ...      'Name', 'Phase III selector', ...      'NumberTitle', 'off', ...      'Position', [36.6667   15.5000  116.5000   34.8750], ...      'UserData', ud, ...      'toolbar',  'figure');  set(h1, ...      'WindowButtonMotionFcn', @mousemover, ...      'CloseRequestFcn', {@pIIIquit, h1} ...      );    jej_axes = axes( ...      'Position', [0.03 0.084016393442623 0.96 0.379098360655738], ...      'XminorTick', 'on', ...      'XminorGrid', 'on', ...      'XGrid', 'on', ...      'YGrid', 'on', ...      'Tag', 'jej axes');      duod_axes = axes( ...      'Position', [0.03 0.532786885245902 0.96 0.381147540983607], ...      'XminorTick', 'on', ...      'XminorGrid', 'on', ...      'XGrid', 'on', ...      'YGrid', 'on', ...      'Tag', 'duod axes');  uicontrol( ...      'Style', 'text', ...      'Parent', h1, ...      'Units', 'normalized', ...      'BackgroundColor', [0.8 1 0.8], ...      'FontWeight', 'bold', ...      'FontSize', 10, ...      'Position', [0.32761087267525 0.47 0.353361945636624 0.03], ...      'String', 'Jejenal pressure (channel 7)');    uicontrol( ...      'Style', 'text', ...      'Parent', h1, ...      'Units', 'normalized', ...      'BackgroundColor', [0.8 1 0.8], ...      'FontSize', 10, ...      'FontWeight', 'bold', ...      'Position', [0.313304721030043 0.92 0.386266094420601 0.04], ...      'String', 'Duodenal pressure (channel 3)');  btarray = [];    btarray(end+1) = uicontrol( ...      'Style', 'push', ...      'Parent', h1, ...      'Units', 'normalized', ...      'BackgroundColor', [0.996108949416342 0.644541084916457 0], ...      'FontSize', 8, ...      'Position', [0.14 0.003 0.2 0.04], ...      'String', 'add another phase III', ...      'Enable', 'off', ...      'callback', @addline);  btarray(end+1) = uicontrol( ...      'Parent', h1, ...      'Units', 'normalized', ...      'BackgroundColor', [0.996108949416342 0.644541084916457 0], ...      'FontSize', 8, ...      'Position', [0.35 0.003 0.16 0.04], ...      'callback', @feedline, ...      'Enable', 'off', ...      'String', 'set feeding time');      btarray(end+1) = uicontrol( ...      'Parent', h1, ...      'Units', 'normalized', ...      'BackgroundColor', [0.996108949416342 0 0], ...      'FontSize', 8, ...      'Position', [0.52 0.003 0.13 0.04], ...      'callback', @deleteline, ...      'Enable', 'off', ...      'String', 'delete event');      btarray(end+1) = uicontrol( ...      'Parent', h1, ...      'Units', 'normalized', ...      'BackgroundColor', [0.996108949416342 0.996108949416342 0], ...      'FontSize', 8, ...      'Position', [0.66 0.003 0.1 0.04], ...      'String', 'analyze', ...      'Enable', 'off', ...      'CallBack', {@analyze, h1, duod_axes, jej_axes});    uicontrol( ...      'Style', 'push', ...      'Parent', h1, ...      'Units', 'normalized', ...      'BackgroundColor', [0.5 1 0.5], ...      'FontSize', 8, ...      'Position', [0.01 0.003 0.12 0.04], ...      'String', 'open file ...', ...      'callback', {@openfile, duod_axes, jej_axes, btarray});  uicontrol( ...      'Parent', h1, ...      'Units', 'normalized', ...      'BackgroundColor', [0 0 0], ...      'FontWeight', 'bold', ...      'FontSize', 8, ...      'ForegroundColor', 'white', ...      'Position', [0.89 0.003 0.1 0.04], ...      'String', 'quit', ...      'callback', {@pIIIquit, h1});function analyze(o, crap, mainFigH, duod_axes, jej_axes)  % This is where the analysis happens.        ud = get(mainFigH, 'UserData');    try      filt_data = ud.filt_data;    catch      % No data loaded - nothing to analyse      return    end        % Retreive Constants    jej_pressure_channel  = ud.jej_pressure_channel;     duod_pressure_channel = ud.duod_pressure_channel;    jej_pd_channel        = ud.jej_pd_channel;    duod_pd_channel       = ud.duod_pd_channel;    back_range            = ud.back_range;    forw_range            = ud.forw_range;    III_window            = ud.III_window;    try      feedl = findobj(duod_axes, 'Tag', 'feed line');      xd = get(feedl, 'XData');      feeding_time = round(xd(1));    catch      feeding_time = size(filt_data, 1)-1;    end        patient = 'Bob the Builder';    % p III counts, starts and ends    try      ls = findobj(jej_axes, 'tag', 'start line');      le = findobj(jej_axes, 'tag', 'end line');      jej_III_cnt = length(ls);      for i=1:jej_III_cnt	x = get(ls(i), 'XData');	jej_III_start(i) = round(x(1));	x = get(le(i), 'XData');	jej_III_end(i) = round(x(1));      end      [jej_III_start, indx] = sort(jej_III_start);      jej_III_end = jej_III_end(indx);    catch      jej_III_cnt = 0;    end        try      ls = findobj(duod_axes, 'tag', 'start line');      le = findobj(duod_axes, 'tag', 'end line');      duod_III_cnt = length(ls);      for i=1:duod_III_cnt	x = get(ls(i), 'XData');	duod_III_start(i) = round(x(1));	x = get(le(i), 'XData');	duod_III_end(i) = round(x(1));      end      [duod_III_start, indx] = sort(duod_III_start);      duod_III_end = duod_III_end(indx);    catch      duod_III_cnt = 0;    end          % Fasted contractions  f = find_contractions(filt_data(1:feeding_time, jej_pressure_channel));  jej_fasted_contractions = length(f);  jej_fasted_frequency = jej_fasted_contractions / ...      feeding_time * 60;  f = find_contractions(filt_data(1:feeding_time, duod_pressure_channel));  duod_fasted_contractions = length(f);  duod_fasted_frequency = duod_fasted_contractions / ...      feeding_time * 60;      % Fed contractions  f = find_contractions(filt_data(feeding_time+1:end, jej_pressure_channel));  jej_fed_contractions = length(f);  jej_fed_frequency = jej_fed_contractions / (length(filt_data)-feeding_time) ...      * 60;  f = find_contractions(filt_data(feeding_time+1:end, duod_pressure_channel));  duod_fed_contractions = length(f);  duod_fed_frequency = duod_fed_contractions / (length(filt_data)-feeding_time) ...      * 60;        % Fasted antero/retro ratio  j = 1;  for i=2:4    c = find_contractions(filt_data(1:feeding_time, i));    contracts{j} = c;    j = j + 1;  end  back_events = find_span_events(contracts, back_range);  retro = length(back_events);  forw_events = find_span_events(contracts, forw_range);  antero = length(forw_events);  if retro==0    antero_to_retro_fasted = 0;  else    antero_to_retro_fasted = antero/retro;  end    % Fed antero/retro ratio  j = 1;  for i=2:4    c = find_contractions(filt_data(feeding_time:end, i));    contracts{j} = c;    j = j + 1;  end  back_events = find_span_events(contracts, back_range);  retro = length(back_events);  forw_events = find_span_events(contracts, forw_range);  antero = length(forw_events);  if retro==0    antero_to_retro_fed = 0;  else    antero_to_retro_fed = antero/retro;  end      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  % Analysis of the Jejunal PD data %  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  % Set outliers to the mean of the PD without outliers.  pd = filt_data(:, jej_pd_channel);  indx = find(abs(pd)>30);  pd_x = pd;  pd_x(indx) = [];  pd(indx) = mean(pd_x);  % mean PD data for fed and fasted  jej_PD_fasted = mean(pd(1:feeding_time));  jej_PD_fed    = mean(pd(feeding_time+1:end));    pressure = filt_data(:, jej_pressure_channel);    for i=1:jej_III_cnt    % PD data around each phase III    III_end   = jej_III_end(i)*4;    III_start = jej_III_start(i)*4;    III_cnt   = jej_III_cnt;        if (III_cnt>0) & (III_end>III_start)      start_III_window = max(1, III_start-III_window);      end_III_window   = min(length(filt_data), III_end + ...			     III_window);          PD_II = mean(pd(start_III_window:III_start));      press_II = mean(pressure(start_III_window:III_start));            PD_I  = mean(pd(III_end:end_III_window));      press_I  = mean(pressure(III_end:end_III_window));            [PD_III_max, time_PD_III_max] = min(pd(III_start:III_end));      time_PD_III_max = time_PD_III_max / 4;            [press_III_max, time_press_III_max] = ...	  max(pressure(III_start:III_end));      time_press_III_max = time_press_III_max / 4;      press_III_slope = press_III_max / time_press_III_max;            press_III = mean(pressure(III_start:III_end));      PD_III_slope = (PD_III_max - pd(III_start)) / ...	  time_PD_III_max;            PD_regression = [PD_I PD_II PD_III_max] / [press_I press_II press_III];    else      PD_II              = 0;      PD_I               = 0;      PD_III_slope       = 0;      PD_III_max         = 0;      PD_regression      = 0;      press_III_slope    = 0;      press_III_max      = 0;      time_press_III_max = 0;      time_PD_III_max    = 0;    end            jej_PD_I(i)               = PD_I;    jej_PD_II(i)              = PD_II;    jej_PD_III_max(i)         = PD_III_max;    jej_PD_III_slope(i)       = PD_III_slope;    jej_PD_regression(i)      = PD_regression;    jej_press_III_slope(i)    = press_III_slope;    jej_press_III_max(i)      = press_III_max;    jej_time_press_III_max(i) = time_press_III_max;    jej_time_PD_III_max(i)    = time_PD_III_max;  end      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  % Analysis of the Duodenal PD data %  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  % Set outliers to the mean of the PD without outliers.  pd = filt_data(:, duod_pd_channel);  indx = find(abs(pd)>30);  pd_x = pd;  pd_x(indx) = [];  pd(indx) = mean(pd_x);  % mean PD data for fed and fasted  duod_PD_fasted = mean(pd(1:feeding_time));  duod_PD_fed    = mean(pd(feeding_time+1:end));    pressure = filt_data(:, duod_pressure_channel);    for i=1:duod_III_cnt    % PD data around each phase III    III_end   = duod_III_end(i)*4;    III_start = duod_III_start(i)*4;    III_cnt   = duod_III_cnt;        if (III_cnt>0) & (III_end>III_start)      start_III_window = max(1, III_start-III_window);      end_III_window   = min(length(filt_data), III_end + ...			     III_window);          PD_II = mean(pd(start_III_window:III_start));      press_II = mean(pressure(start_III_window:III_start));            PD_I  = mean(pd(III_end:end_III_window));      press_I  = mean(pressure(III_end:end_III_window));            [PD_III_max, time_PD_III_max] = min(pd(III_start:III_end));      time_PD_III_max = time_PD_III_max / 4;            [press_III_max, time_press_III_max] = ...	  max(pressure(III_start:III_end));      time_press_III_max = time_press_III_max / 4;      press_III_slope = press_III_max / time_press_III_max;            press_III = mean(pressure(III_start:III_end));      PD_III_slope = (PD_III_max - pd(III_start)) / ...	  time_PD_III_max;            PD_regression = [PD_I PD_II PD_III_max] / [press_I press_II press_III];    else      PD_II              = 0;      PD_I               = 0;      PD_III_slope       = 0;      PD_III_max         = 0;      PD_regression      = 0;      press_III_slope    = 0;      press_III_max      = 0;      time_press_III_max = 0;      time_PD_III_max    = 0;    end            duod_PD_I(i)               = PD_I;    duod_PD_II(i)              = PD_II;    duod_PD_III_max(i)         = PD_III_max;    duod_PD_III_slope(i)       = PD_III_slope;    duod_PD_regression(i)      = PD_regression;    duod_press_III_slope(i)    = press_III_slope;    duod_press_III_max(i)      = press_III_max;    duod_time_press_III_max(i) = time_press_III_max;    duod_time_PD_III_max(i)    = time_PD_III_max;  end    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  % Gather output in a cell array %  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  outstr = {};      outstr{end+1} = '                  Global data';  outstr{end+1} = sprintf('Antero/retro wave ratio (fasted): %f', ...			  antero_to_retro_fasted);  outstr{end+1} = sprintf('Antero/retro wave ratio (fed): %f', ...			  antero_to_retro_fed);  if jej_III_cnt ~= duod_III_cnt    outstr{end+1} = sprintf(['The number of III events is different' ...		    ' in different regions which may lead to an' ...		    ' incorrect calculation']);  end  for i=1:min(jej_III_cnt, duod_III_cnt)    outstr{end+1} = sprintf(['Event at %d (s) had propagation ' ...			    'time of %d (s)'], ...			    duod_III_start(i), ...			    (jej_III_start(i)-duod_III_start(i)));  end      outstr{end+1} = '';  outstr{end+1} = '                  Jejunum overall data';  outstr{end+1} = sprintf('Number of phase IIIs: %d', jej_III_cnt);  outstr{end+1} = sprintf('Total contractions: %d', ...			  jej_fasted_contractions + jej_fed_contractions);  outstr{end+1} = sprintf('Fasted contraction count: %d', ...			  jej_fasted_contractions);  outstr{end+1} = sprintf('Fasted contraction frequency: %f', ...			  jej_fasted_frequency);  outstr{end+1} = sprintf('Fed contraction count: %d', ...			  jej_fed_contractions);  outstr{end+1} = sprintf('Fed contraction frequency: %f', ...			  jej_fed_frequency);  outstr{end+1} = sprintf('Mean fasted PD: %g', jej_PD_fasted);  outstr{end+1} = sprintf('Fasted PD/freq: %g', ...			  jej_PD_fasted / jej_fasted_frequency);  outstr{end+1} = sprintf('Mean fed PD: %g', jej_PD_fed);    if jej_III_cnt>=1  outstr{end+1} = '';    outstr{end+1} = '                  Jejunum phase III data';  end  if jej_III_cnt>=2    outstr{end+1} = ['Phase III cycle times (s):' ...		     sprintf(' %d', abs(diff(jej_III_start)))];  end    if jej_III_cnt>=1    outstr{end+1} = ['Phase III durations (s):' ...		     sprintf(' %d', jej_III_end-jej_III_start)];          outstr{end+1} = ['Rate of phase III rise (mmHg/s):' ...		     sprintf(' %g', jej_press_III_slope)];          outstr{end+1} = ['Maximum phase III pressure:' ...		     sprintf(' %g', jej_press_III_max)];    outstr{end+1} = ['Time to max phase III pressure:' ...		     sprintf(' %g', jej_time_press_III_max)];  end          if jej_III_cnt>=1    outstr{end+1} = '';    outstr{end+1} = '                  Jejunum PD data';    outstr{end+1} = ['Mean PD during phase I (mV):' ...		     sprintf(' %g', jej_PD_I)];    outstr{end+1} = ['Mean PD during phase II (mV):' ...		     sprintf(' %g', jej_PD_II)];    outstr{end+1} = ['Max PD during phase III (mV):' ...		     sprintf(' %g', jej_PD_III_max)];    outstr{end+1} = ['Time to PD max during phase III (mV):' ...		     sprintf(' %g', jej_time_PD_III_max)];    outstr{end+1} = [' dPD/dP during phase III (mV/mmHg):' ...		     sprintf(' %g', jej_PD_regression)];  end    outstr{end+1} = '';  outstr{end+1} = '                  Duodenum overall data';  outstr{end+1} = sprintf('Number of phase IIIs: %d', duod_III_cnt);  outstr{end+1} = sprintf('Total contractions: %d', ...			  duod_fasted_contractions + duod_fed_contractions);  outstr{end+1} = sprintf('Fasted contraction count: %d', ...			  duod_fasted_contractions);  outstr{end+1} = sprintf('Fasted contraction frequency: %f', ...			  duod_fasted_frequency);  outstr{end+1} = sprintf('Fed contraction count: %d', ...			  duod_fed_contractions);  outstr{end+1} = sprintf('Fed contraction frequency: %f', ...			  duod_fed_frequency);  outstr{end+1} = sprintf('Mean fasted PD: %g', duod_PD_fasted);  outstr{end+1} = sprintf('Fasted PD/freq: %g', ...			  duod_PD_fasted / duod_fasted_frequency);  outstr{end+1} = sprintf('Mean fed PD: %g', duod_PD_fed);  if duod_III_cnt>=1    outstr{end+1} = '';    outstr{end+1} = '                  Duodenum phase III data';  end  if duod_III_cnt>=2    outstr{end+1} = ['Phase III cycle times (s):' ...		     sprintf(' %d', abs(diff(duod_III_start)))];  end    if duod_III_cnt>=1    outstr{end+1} = ['Phase III durations (s):' ...		     sprintf(' %d', duod_III_end-duod_III_start)];          outstr{end+1} = ['Rate of phase III rise (mmHg/s):' ...		     sprintf(' %g', duod_press_III_slope)];          outstr{end+1} = ['Maximum phase III pressure:' ...		     sprintf(' %g', duod_press_III_max)];    outstr{end+1} = ['Time to max phase III pressure:' ...		     sprintf(' %g', duod_time_press_III_max)];  end          if duod_III_cnt>=1    outstr{end+1} = '';    outstr{end+1} = '                  Duodenum PD data';    outstr{end+1} = ['Mean PD during phase I (mV):' ...		     sprintf(' %g', duod_PD_I)];    outstr{end+1} = ['Mean PD during phase II (mV):' ...		     sprintf(' %g', duod_PD_II)];    outstr{end+1} = ['Max PD during phase III (mV):' ...		     sprintf(' %g', duod_PD_III_max)];    outstr{end+1} = ['Time to PD max during phase III (mV):' ...		     sprintf(' %g', duod_time_PD_III_max)];    outstr{end+1} = [' dPD/dP during phase III (mV/mmHg):' ...		     sprintf(' %g', duod_PD_regression)];  end        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  % Present data in a nice window %  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  figure(26)  set(26, 'Name','Phase III analysis', ...	  'NumberTitle', 'off', ...	  'toolbar', 'none', ...	  'Color',[0.8 1.0 0.8], ...	  'menu', 'none');      lb = findobj(26, 'Style', 'Listbox');  if isempty(lb)    lb = uicontrol(...	'Style', 'ListBox', ...	'Units', 'normalized', ...	'Position', [0.05 0.05 0.9 0.93], ...	'Min', 1, 'Max', 3 ...		   );  end  set(lb, ...      'ListBoxTop', 1, ...      'String', outstr ...      );          exb = findobj(26, 'Style', 'push', 'String', 'excel export ...');  if isempty(exb)    uicontrol('Style', 'push', ...	      'Units', 'normalized', ...	      'BackgroundColor', [0.5 1 0.5], ...	      'FontSize', 8, ...	      'Position', [0.01 0.003 0.18 0.05], ...	      'String', 'excel export ...');  end    clpb = findobj(26, 'Style', 'push', 'String', 'copy selected');  if isempty(clpb)    uicontrol('Style', 'push', ...	      'Units', 'normalized', ...	      'BackgroundColor', 'yellow', ...	      'FontSize', 8, ...	      'Position', [0.19 0.003 0.14 0.05], ...	      'String', 'copy selected', ...	      'Callback', {@copysel, lb});  end    clpb = findobj(26, 'Style', 'push', 'String', 'copy all');  if isempty(clpb)    uicontrol('Style', 'push', ...	      'Units', 'normalized', ...	      'BackgroundColor', 'yellow', ...	      'FontSize', 8, ...	      'Position', [0.33 0.003 0.1 0.05], ...	      'String', 'copy all', ...	      'Callback', {@copyall, lb});  end  function copysel(o, crap, listo)  v   = get(listo, 'Value');  str = get(listo, 'String');  s = '';  for i=1:length(v)    s = sprintf('%s%s\n', s, str{v(i)});  end  clipboard('copy', s);  function copyall(o, crap, listo)  str = get(listo, 'String');  s = '';  for i=1:length(str)    s = sprintf('%s%s\n', s, str{i});  end  clipboard('copy', s);  function kontraktioner = find_contractions(data)%% Determine peaks using Henrik's peak detection algorithm%  dt=diff(data);  dt2=diff(data,2);  data=data(1:length(data)-2);  if isempty(data)    kontraktioner = [];    return  end  nolld=find((dt(2:length(dt)).*dt(1:length(dt)-1))<0);  tt=dt2*0;  tt(nolld)=tt(nolld)+1;  tops=find(tt.*dt2<0);  baseline = mean(data)-5;  highs=find(data>baseline +10);  if isempty(tops)    kontraktioner = [];    return  end  tops=tops+1;  % ignore apparent peaks at the end of the data set  if tops(end)>length(tops), tops(end) = []; end  top=dt2*0;  top(tops)=top(tops)+1;  high=dt2*0;  high(highs)=high(highs)+1;  top=top.*high;  tops=find(top==1);  kontraktioner = zeros(size(data));  kontraktioner(tops) = 1;    % The vector kontraktioner now contains the time points of event  kontraktioner = find(kontraktioner);  function events = find_span_events(kontraktioner, range)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% For each event in channel 1 look for:% 1) events slightly earlier in channel _3_% 2) or slightly later% 3) or synchronous% Then check for a point in channel 2 that lies between the points% in channels 1 and 3%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  events = [];    range = sort(range); % Just in case :)    % For each event in the   for i=1:length(kontraktioner{1})        p1 = kontraktioner{1}(i);        % Search for points in channel 3 within a range of this point    indx = find((range(1)+p1)<=kontraktioner{3} & ...		kontraktioner{3}<=(range(2)+p1));    % Extract their values    p3 = kontraktioner{3}(indx);        % If any points were found...    if ~isempty(indx)      % If several points are found, only keep the closest one      [x, keep_point] = min(abs(p1 - p3));      p3 = p3(keep_point);            r = sort([p1 p3]);            % Search for points in channel 3 that lie between those in      % channels 1 and 2      indx = find(r(1)<=kontraktioner{2} & kontraktioner{2}<=r(2));            p2 = kontraktioner{2}(indx);            if ~isempty(p2)	% Create the event entry, keep only one channel 2 event if	% there were several.	events(end+1, :) = [p1 p2(1) p3];      end    end      end  